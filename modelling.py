# -*- coding: utf-8 -*-
"""ByteCollab - Modeling Finpro DA - Permana Zainal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UqpLMq9qO0YWkPZWDfcjr7ONUOQXwwK7
"""

import pandas as pd
import numpy as np
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
from prophet import Prophet
from prophet.diagnostics import cross_validation, performance_metrics

data  = pd.read_csv("/content/ByteCollab - Dataset Finpro DA - Permana Zainal.csv")
df = pd.DataFrame(data)
df.head()

df.info()

df['type'].unique()

df.describe()

"""# Data Reduction"""

#rata-rata harga di setiap wilayah berdasarkan type
average_price_by_type_region = df.groupby(['region', 'type'])['AveragePrice'].mean()
result = average_price_by_type_region.reset_index()
result_sorted = result.sort_values(by='AveragePrice', ascending=False)
result_organic = result_sorted[result_sorted['type'] == 'organic']
result_conventional = result_sorted[result_sorted['type'] == 'conventional']
merged_result = pd.merge(result_organic, result_conventional, on='region', suffixes=('_organic', '_conventional'))
merged_result

#filter data untuk mencari total volume dan total bags penjualan type organic
type_organic = df[df['type']=='organic']
df['Date'] = pd.to_datetime(df['Date'])
grouped_data = type_organic.groupby(['Date', 'region']).agg({'Total Volume': 'sum', 'Total Bags': 'sum'}).reset_index()
grouped_data

#filter untuk menampilkan data di 3 wilayah
selected_regions = ['Boston', 'MiamiFtLauderdale', 'Southeast']
df_organic_selected_regions = type_organic[type_organic['region'].isin(selected_regions)]
df_organic_selected_regions

#agregasi untuk melihat total volume dan total bags
sales = df_organic_selected_regions.groupby('region').agg({'Total Volume': 'sum', 'Total Bags': 'sum'}).reset_index()
sales

"""# Data Visualisation"""

# Gunakan .loc untuk membuat salinan data yang independen
df_organic_Southeast = df.loc[(df['type'] == 'organic') & (df['region'] == 'Southeast')].copy()

# Tambahkan kolom 'Month' sebagai bulan pengamatan
df_organic_Southeast['Month'] = df_organic_Southeast['Date'].dt.month

# Gunakan Plotly Express untuk membuat line chart
fig = px.line(df_organic_Southeast, x='Date', y='Total Volume', markers=True, title='Penjualan Type Organic per Bulan di Southeast')
fig.show()

df_organic_Boston = df.loc[(df['type'] == 'organic') & (df['region'] == 'Boston')].copy()

# Tambahkan kolom 'Month' sebagai bulan pengamatan
df_organic_Boston['Month'] = df_organic_Boston['Date'].dt.month

# Gunakan Plotly Express untuk membuat line chart
fig = px.line(df_organic_Boston, x='Date', y='Total Volume', markers=True, title='Penjualan Type Organic per Bulan di Boston')
fig.show()

df_organic_miami = df.loc[(df['type'] == 'organic') & (df['region'] == 'MiamiFtLauderdale')].copy()

# Tambahkan kolom 'Month' sebagai bulan pengamatan
df_organic_miami['Month'] = df_organic_miami['Date'].dt.month

# Gunakan Plotly Express untuk membuat line chart
fig = px.line(df_organic_miami, x='Date', y='Total Volume', markers=True, title='Penjualan Type Organic per Bulan di MiamiFtLauderdale')
fig.show()

ttl_volume_bags = df_organic_selected_regions.groupby('region').agg({'Total Volume': 'sum', 'Total Bags': 'sum'}).reset_index()
fig = px.bar(ttl_volume_bags, x='region', y=['Total Volume', 'Total Bags'],
             title='Total Volume and Total Bags by Region (Organic)',
             labels={'value': 'Count', 'variable': 'Metric'},
             color='variable')
fig.show()

type_count = df['type'].value_counts()
print(type_count)

df_bags = df.groupby('type')['Total Bags'].sum()
fig_type_perc = px.pie(df, names= df_bags.index,  values = df_bags.values, title=f'Distribution of Type', hole=0.2, color_discrete_sequence=px.colors.sequential.turbid)
fig_type_perc.update_traces(textinfo='percent+label')
fig_type_perc.update_layout(legend_title_text='Categories:', legend=dict(orientation="h", yanchor="bottom", y=1.02))
fig_type_perc.show()

df_bags = df.groupby('type')['Total Volume'].sum()
fig_type_perc = px.pie(df, names= df_bags.index,  values = df_bags.values, title=f'Distribution of Type', hole=0.2, color_discrete_sequence=px.colors.sequential.turbid)
fig_type_perc.update_traces(textinfo='percent+label')
fig_type_perc.update_layout(legend_title_text='Categories:', legend=dict(orientation="h", yanchor="bottom", y=1.02))
fig_type_perc.show()

"""## Data Transformation"""

df2 = df.drop(['Date','region','4046','4225','4770','observation_id','year'], axis = 1)
df2['type'] = df2['type'].replace({'conventional': 0, 'organic': 1})

"""Korelasi"""

# Menghitung korelasi
corr = df2.corr()

# Membuat visualisasi korelasi dengan heatmap
plt.figure(figsize=(8, 6))
warna = sns.diverging_palette(10, 250, as_cmap=True)

# Memetakan nilai korelasi di setiap sel
sns.heatmap(corr, annot=True, cmap=warna, vmin=-1, vmax=1)
plt.title("Heatmap Korelasi")
plt.show()

"""**Southeast**"""

#penjualan alpukat wilayah Southeast
df_organic_Southeast = df.loc[(df['type'] == 'organic') & (df['region'] == 'Southeast')].copy()
#statinarisasi data
df_organic_Southeast['stationary_data'] = np.log(df_organic_Southeast['Total Volume'])
data_southeast = df_organic_Southeast[['Date','stationary_data']]
#sorting berdasarkan tanggal
data_southeast = data_southeast.copy()
data_southeast['Date'] = pd.to_datetime(data_southeast['Date'])
result_southeast = data_southeast.sort_values(by='Date')
result_southeast.head()

# merubah nama kolom karena untuk menggunakan prophet nama kolom harus ds dan y
result_southeast.columns = ('ds','y')
result_southeast.tail()

"""**Boston**"""

#penjualan alpukat wilayah boston
df_organic_Boston = df.loc[(df['type'] == 'organic') & (df['region'] == 'Boston')].copy()
#statinarisasi data
df_organic_Boston['stationary_data'] = np.log(df_organic_Boston['Total Volume'])
data_boston = df_organic_Boston[['Date','stationary_data']]
#sorting berdasarkan tanggal
data_boston = data_boston.copy()
data_boston['Date'] = pd.to_datetime(data_boston['Date'])
result_boston = data_boston.sort_values(by='Date')
result_boston.head()

# merubah nama kolom karena untuk menggunakan prophet nama kolom harus ds dan y
result_boston.columns = ('ds','y')
result_boston.tail()

"""MiamiFtLauderdale"""

#penjualan alpukat wilayah MiamiFtLauderdale
df_organic_miami = df.loc[(df['type'] == 'organic') & (df['region'] == 'MiamiFtLauderdale')].copy()
#statinarisasi data
df_organic_miami['stationary_data'] = np.log(df_organic_miami['Total Volume'])
data_miami = df_organic_miami[['Date','stationary_data']]
#sorting berdasarkan tanggal
data_miami = data_miami.copy()
data_miami['Date'] = pd.to_datetime(data_miami['Date'])
result_miami = data_miami.sort_values(by='Date')
result_miami.head()

# merubah nama kolom karena untuk menggunakan prophet nama kolom harus ds dan y
result_miami.columns = ('ds','y')
result_miami.tail()

#penjualan alpukat wilayah MiamiFtLauderdale
df_organic_southcarolina = df.loc[(df['type'] == 'organic') & (df['region'] == 'SouthCarolina')].copy()
#statinarisasi data
df_organic_southcarolina['stationary_data'] = np.log(df_organic_southcarolina['Total Volume'])
data_southcarolina = df_organic_southcarolina[['Date','stationary_data']]
#sorting berdasarkan tanggal
data_southcarolina = data_southcarolina.copy()
data_southcarolina['Date'] = pd.to_datetime(data_southcarolina['Date'])
result_southcarolina = data_miami.sort_values(by='Date')
result_southcarolina.head()

# merubah nama kolom karena untuk menggunakan prophet nama kolom harus ds dan y
result_miami.columns = ('ds','y')
result_miami.tail()

"""# Modeling

Prophet
"""

from prophet import Prophet
from prophet.diagnostics import cross_validation, performance_metrics
import logging
import warnings
logging.getLogger('prophet').setLevel(logging.WARNING)
logging.getLogger('cmdstanpy').setLevel(logging.WARNING)
# membuat model
# menggunakan interval default yaitu 0.8 dan seasonality mode multiplicative karena menggunakan data bulanan
model = Prophet(interval_width=0.8, seasonality_mode='multiplicative')
model_fit_southeast = model.fit(result_southeast)
warnings.filterwarnings("ignore")

#forecasting southeast
future_southeast = model_fit_southeast.make_future_dataframe(periods=90)
forecast_southeast = model_fit_southeast.predict(future_southeast)
forecast_southeast.tail()

forecast_southeast[['ds','yhat']]

plot = model.plot(forecast_southeast)
plt.title('Forecasting Penjualan Alpukat Organic di Wilayah Southeast')
plot.show()

plot2 = model.plot_components(forecast_southeast)

import logging
import warnings

# Suppress information and debug messages
logging.getLogger('prophet').setLevel(logging.WARNING)
logging.getLogger('cmdstanpy').setLevel(logging.WARNING)

# membuat model
# menggunakan interval default yaitu 0.8 dan seasonality mode multiplicative karena menggunakan data bulanan
model = Prophet(interval_width=0.8, seasonality_mode='multiplicative')
model_fit_boston = model.fit(result_boston)
# Optionally, you can suppress warnings as well
warnings.filterwarnings("ignore")

#forecasting boston
future_boston = model_fit_boston.make_future_dataframe(periods=90)
forecast_boston = model_fit_boston.predict(future_boston)
forecast_boston.tail()

forecast_boston[['ds','yhat']]

plot_boston = model.plot(forecast_boston)
plt.title('Forecasting Penjualan Alpukat Organic di Wilayah Boston')
plot_boston.show()

plot2 = model.plot_components(forecast_boston)

import logging
import warnings

# Suppress information and debug messages
logging.getLogger('prophet').setLevel(logging.WARNING)
logging.getLogger('cmdstanpy').setLevel(logging.WARNING)

# membuat model
# menggunakan interval default yaitu 0.8 dan seasonality mode multiplicative karena menggunakan data bulanan
model = Prophet(interval_width=0.8, seasonality_mode='multiplicative')
model_fit_miami = model.fit(result_miami)
# Optionally, you can suppress warnings as well
warnings.filterwarnings("ignore")

#forecasting miami
future_miami = model_fit_miami.make_future_dataframe(periods=90)
forecast_miami = model_fit_miami.predict(future_miami)
forecast_miami.tail()

forecast_miami[['ds','yhat']]

plot_miami = model.plot(forecast_miami)
plt.title('Forecasting Penjualan Alpukat Organic di Wilayah MiamiFtLauderdale')
plot_miami.show()

plot2_miami = model.plot_components(forecast_miami)

"""cek slope"""

from sklearn.linear_model import LinearRegression

# Gabungkan dua dataframe berdasarkan kolom yang sesuai, misalnya kolom tanggal ('ds')
merged_data = pd.merge(df_organic_Southeast, forecast_southeast, how='inner', left_on='Date', right_on='ds')

# Persiapkan data untuk variabel independen (X) dan dependen (Y)
X = merged_data['Total Volume'].values.reshape(-1, 1)
Y = merged_data['yhat'].values

# Membuat model regresi linier
model = LinearRegression()

# Melatih model
model.fit(X, Y)

# Mendapatkan slope (koefisien regresi)
slope = model.coef_[0]

print('Slope dari tren : ', slope)

# Visualisasi hasil
plt.scatter(merged_data['Total Volume'], merged_data['yhat'], color='blue', label='Data')
plt.plot(merged_data['Total Volume'], model.predict(X), color='red', linewidth=2, label='Regression Line')
plt.title('Linear Regression Visualization for Southeast')
plt.xlabel('Total Volume')
plt.ylabel('yhat')
plt.legend()
plt.show()

from sklearn.linear_model import LinearRegression

# Gabungkan dua dataframe berdasarkan kolom yang sesuai, misalnya kolom tanggal ('ds')
merged_data = pd.merge(df_organic_Boston, forecast_boston, how='inner', left_on='Date', right_on='ds')

# Persiapkan data untuk variabel independen (X) dan dependen (Y)
X = merged_data['Total Volume'].values.reshape(-1, 1)
Y = merged_data['yhat'].values

# Membuat model regresi linier
model = LinearRegression()

# Melatih model
model.fit(X, Y)

# Mendapatkan slope (koefisien regresi)
slope = model.coef_[0]

print('Slope dari tren : ', slope)

# Visualisasi hasil
plt.scatter(merged_data['Total Volume'], merged_data['yhat'], color='blue', label='Data')
plt.plot(merged_data['Total Volume'], model.predict(X), color='red', linewidth=2, label='Regression Line')
plt.title('Linear Regression Visualization for Boston')
plt.xlabel('Total Volume')
plt.ylabel('yhat')
plt.legend()
plt.show()

from sklearn.linear_model import LinearRegression

# Gabungkan dua dataframe berdasarkan kolom yang sesuai, misalnya kolom tanggal ('ds')
merged_data = pd.merge(df_organic_miami, forecast_miami, how='inner', left_on='Date', right_on='ds')

# Persiapkan data untuk variabel independen (X) dan dependen (Y)
X = merged_data['Total Volume'].values.reshape(-1, 1)
Y = merged_data['yhat'].values

# Membuat model regresi linier
model = LinearRegression()

# Melatih model
model.fit(X, Y)

# Mendapatkan slope (koefisien regresi)
slope = model.coef_[0]

print('Slope dari tren : ', slope)

# Visualisasi hasil
plt.scatter(merged_data['Total Volume'], merged_data['yhat'], color='blue', label='Data')
plt.plot(merged_data['Total Volume'], model.predict(X), color='red', linewidth=2, label='Regression Line')
plt.title('Linear Regression Visualization for MiamiFtLauderdale')
plt.xlabel('Total Volume')
plt.ylabel('yhat')
plt.legend()
plt.show()

"""Evaluaion Model"""

# Kembalikan nilai dari log ke skala aslinya
forecast_southeast['yhat'] = np.exp(forecast_southeast['yhat'])
forecast_southeast['yhat_lower'] = np.exp(forecast_southeast['yhat_lower'])
forecast_southeast['yhat_upper'] = np.exp(forecast_southeast['yhat_upper'])

# Kembalikan nilai dari log ke skala aslinya
forecast_boston['yhat'] = np.exp(forecast_boston['yhat'])
forecast_boston['yhat_lower'] = np.exp(forecast_boston['yhat_lower'])
forecast_boston['yhat_upper'] = np.exp(forecast_boston['yhat_upper'])

# Kembalikan nilai dari log ke skala aslinya
forecast_miami['yhat'] = np.exp(forecast_miami['yhat'])
forecast_miami['yhat_lower'] = np.exp(forecast_miami['yhat_lower'])
forecast_miami['yhat_upper'] = np.exp(forecast_miami['yhat_upper'])

result_evaluation = cross_validation(model_fit_southeast,
                                     horizon='90 days',
                                     period='365 days',
                                     initial='900 days')

# Calculate performance metric
result_perform_southeast = performance_metrics(result_evaluation)

# Display performance metrics
result_perform_southeast

result_evaluation = cross_validation(model_fit_boston,
                                     horizon='90 days',
                                     period='365 days',
                                     initial='900 days')

# Calculate performance metrics
result_perform_boston = performance_metrics(result_evaluation)

# Display performance metrics
result_perform_boston

result_evaluation = cross_validation(model_fit_miami,
                                     horizon='90 days',
                                     period='365 days',
                                     initial='900 days')

# Calculate performance metrics
result_perform_miami = performance_metrics(result_evaluation)

# Display performance metrics
result_perform_miami

eval = pd.read_csv('/content/eval.csv')
eval

"""hitung perform forecast"""

total_volume_sebelumnya_southeast = df_organic_Southeast['Total Volume'].sum()  # Gantilah dengan data volume yang sesuai

# Contoh data hasil forecasting untuk 3 bulan berikutnya
total_volume_southeast = forecast_southeast['yhat'].sum()  # Gantilah dengan total volume hasil forecasting yang sesuai

# Hitung peningkatan persentase
peningkatan_persentase_southeast = ((total_volume_southeast - total_volume_sebelumnya_southeast) / total_volume_sebelumnya_southeast) * 100

print(f'Peningkatan Persentase diwilayah Southeast: {peningkatan_persentase_southeast:.2f}%')

total_volume_sebelumnya_boston = df_organic_Boston['Total Volume'].sum()  # Gantilah dengan data volume yang sesuai

# Contoh data hasil forecasting untuk 3 bulan berikutnya
total_volume_boston = forecast_boston['yhat'].sum()  # Gantilah dengan total volume hasil forecasting yang sesuai

# Hitung peningkatan persentase
peningkatan_persentase_boston = ((total_volume_boston - total_volume_sebelumnya_boston) / total_volume_sebelumnya_boston) * 100

print(f'Peningkatan Persentase diwilayah Boston: {peningkatan_persentase_boston:.2f}%')

total_volume_sebelumnya_miami = df_organic_miami['Total Volume'].sum()  # Gantilah dengan data volume yang sesuai

# Contoh data hasil forecasting untuk 3 bulan berikutnya
total_volume_miami = forecast_miami['yhat'].sum()  # Gantilah dengan total volume hasil forecasting yang sesuai

# Hitung peningkatan persentase
peningkatan_persentase_miami = ((total_volume_miami - total_volume_sebelumnya_miami) / total_volume_sebelumnya_miami) * 100

print(f'Peningkatan Persentase diwilayah MiamiFtLauderdale: {peningkatan_persentase_miami:.2f}%')

tvs = total_volume_sebelumnya_southeast + total_volume_sebelumnya_boston + total_volume_sebelumnya_miami
tvf3w = total_volume_southeast + total_volume_boston + total_volume_miami
hf = tvf3w - tvs
# Hitung peningkatan persentase global
peningkatan_persentase_global = hf / tvs * 100
print(f'Peningkatan Persentase keseluruhan : {peningkatan_persentase_global:.2f}%')